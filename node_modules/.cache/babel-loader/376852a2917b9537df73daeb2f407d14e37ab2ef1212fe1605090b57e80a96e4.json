{"ast":null,"code":"import { setWsHeartbeat } from 'ws-heartbeat/client';\nconst serverAddress = process.env.REACT_APP_URL || '127.0.0.1:3001';\nexport class Posts {\n  constructor() {\n    this.ws = void 0;\n    this.handleNewPost = void 0;\n    this.ws = new WebSocket(`wss://${serverAddress}`);\n    setWsHeartbeat(this.ws, '{\"kind\":\"ping\"}', {\n      pingTimeout: 60000,\n      pingInterval: 25000\n    });\n    this.ws.onmessage = event => {\n      const {\n        data\n      } = event;\n      const parsed = JSON.parse(data);\n      if (parsed.name && parsed.text) {\n        var _this$handleNewPost;\n        (_this$handleNewPost = this.handleNewPost) === null || _this$handleNewPost === void 0 ? void 0 : _this$handleNewPost.call(this, parsed);\n      }\n    };\n  }\n  onNewPost(callback) {\n    this.handleNewPost = callback;\n  }\n  getPosts() {\n    return fetch(`https://${serverAddress}/get_posts`);\n  }\n  sendPost(post) {\n    return fetch(`https://${serverAddress}/send_post?name=${post.name}&text=${post.text}`);\n  }\n}","map":{"version":3,"names":["setWsHeartbeat","serverAddress","process","env","REACT_APP_URL","Posts","constructor","ws","handleNewPost","WebSocket","pingTimeout","pingInterval","onmessage","event","data","parsed","JSON","parse","name","text","_this$handleNewPost","call","onNewPost","callback","getPosts","fetch","sendPost","post"],"sources":["D:/programming/network.v1/cozy-space-client/src/Data.ts"],"sourcesContent":["import { FullPost, Post } from './types'\r\nimport { setWsHeartbeat } from 'ws-heartbeat/client'\r\n\r\nconst serverAddress = process.env.REACT_APP_URL || '127.0.0.1:3001'\r\n\r\nexport class Posts {\r\n  private ws: WebSocket\r\n  private handleNewPost?: (post: FullPost) => void \r\n  \r\n  constructor() {\r\n    this.ws = new WebSocket(`wss://${serverAddress}`)\r\n    setWsHeartbeat(this.ws, '{\"kind\":\"ping\"}', {\r\n      pingTimeout: 60000,\r\n      pingInterval: 25000, \r\n    })\r\n    this.ws.onmessage = event => { \r\n      const { data } = event\r\n      const parsed = JSON.parse(data)\r\n      if (parsed.name && parsed.text) {\r\n        this.handleNewPost?.(parsed)\r\n      } \r\n    }\r\n  }\r\n\r\n  onNewPost(callback: (post: FullPost) => void) {\r\n    this.handleNewPost = callback\r\n  }\r\n\r\n  getPosts() {\r\n    return fetch(`https://${serverAddress}/get_posts`)\r\n  }\r\n  sendPost(post: Post) {\r\n    return fetch(`https://${serverAddress}/send_post?name=${post.name}&text=${post.text}`)\r\n  }\r\n}\r\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,qBAAqB;AAEpD,MAAMC,aAAa,GAAGC,OAAO,CAACC,GAAG,CAACC,aAAa,IAAI,gBAAgB;AAEnE,OAAO,MAAMC,KAAK,CAAC;EAIjBC,WAAWA,CAAA,EAAG;IAAA,KAHNC,EAAE;IAAA,KACFC,aAAa;IAGnB,IAAI,CAACD,EAAE,GAAG,IAAIE,SAAS,CAAE,SAAQR,aAAc,EAAC,CAAC;IACjDD,cAAc,CAAC,IAAI,CAACO,EAAE,EAAE,iBAAiB,EAAE;MACzCG,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,IAAI,CAACJ,EAAE,CAACK,SAAS,GAAGC,KAAK,IAAI;MAC3B,MAAM;QAAEC;MAAK,CAAC,GAAGD,KAAK;MACtB,MAAME,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;MAC/B,IAAIC,MAAM,CAACG,IAAI,IAAIH,MAAM,CAACI,IAAI,EAAE;QAAA,IAAAC,mBAAA;QAC9B,CAAAA,mBAAA,OAAI,CAACZ,aAAa,cAAAY,mBAAA,uBAAlBA,mBAAA,CAAAC,IAAA,KAAI,EAAiBN,MAAM,CAAC;MAC9B;IACF,CAAC;EACH;EAEAO,SAASA,CAACC,QAAkC,EAAE;IAC5C,IAAI,CAACf,aAAa,GAAGe,QAAQ;EAC/B;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAOC,KAAK,CAAE,WAAUxB,aAAc,YAAW,CAAC;EACpD;EACAyB,QAAQA,CAACC,IAAU,EAAE;IACnB,OAAOF,KAAK,CAAE,WAAUxB,aAAc,mBAAkB0B,IAAI,CAACT,IAAK,SAAQS,IAAI,CAACR,IAAK,EAAC,CAAC;EACxF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}