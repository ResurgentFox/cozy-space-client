{"ast":null,"code":"export class Posts {\n  constructor() {\n    this.ws = void 0;\n    this.ws = asyncWebSocket('ws://127.0.0.1:3001/posts');\n  } // давай для начала добавим метод onNewPost((post: Post) => void) такой\n  // эта функция будет устанавливать колбек, коотоый будет вызываться при получении нового поста\n  // вот (post: Post) => void -- это то, каким должен быть колбек, он будет принимать 1 пост и ничего не возвращать\n  // мы кстати уже можем заюзать этот метод в App, го туда\n  // Аня? что? вот такое крч тут коллбек?это никакие правила не нарушает? ага, мы его будем вызывать\n  // нет, наоборот, реактивное программирование) от слова \"реакция\" на что-то (изменения/события)\n  //  эм что это это ты придумал? нет, \"реактивное прграммирование\" потом загуглить надо (тот же реакт поэтому так зовется)\n\n\n  onNewPost(callback) {//А что тут войд значит?\n    // так оно же не работает\n    // ща напишем, но считай, что оно работает и взглянем на этот метод снаружи (из App), мб так по смыслу будет понятнее\n    // можно вернуться в App\n  }\n\n  getPosts() {\n    return fetch('http://127.0.0.1:3001/get_posts');\n  }\n\n  sendPost(post) {\n    return fetch(`http://127.0.0.1:3001/send_post?name=${post.name}&text=${post.text}`);\n  }\n\n} // давай для начала объясню, что я тут написал\n// по сути смысл данной функции в том, чтобы создать вебсокет 1\n// 2 - добавить колбек, который выполнится, когда сокет откроется (будет готов)\n// 3 - вернуть результат в виде промиса, чтобы потом можно было дождаться готовности вебсокета\n// прост если не ждать, то ты видела, какая ошибка получается\n\nfunction asyncWebSocket(url) {\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(url); // (1)\n\n    ws.onopen = () => resolve(ws); // (2 - 3)\n\n  });\n}","map":{"version":3,"sources":["D:/programming/network.v1/cozy-space-client/src/Data.ts"],"names":["Posts","constructor","ws","asyncWebSocket","onNewPost","callback","getPosts","fetch","sendPost","post","name","text","url","Promise","resolve","reject","WebSocket","onopen"],"mappings":"AAEA,OAAO,MAAMA,KAAN,CAAY;AAEjBC,EAAAA,WAAW,GAAG;AAAA,SADNC,EACM;AACZ,SAAKA,EAAL,GAAWC,cAAc,CAAC,2BAAD,CAAzB;AACD,GAJgB,CAKjB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,SAAS,CAACC,QAAD,EAAiC,CAAC;AACzC;AACA;AACA;AACD;;AACDC,EAAAA,QAAQ,GAAG;AACT,WAAOC,KAAK,CAAC,iCAAD,CAAZ;AACD;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAa;AACnB,WAAOF,KAAK,CAAE,wCAAuCE,IAAI,CAACC,IAAK,SAAQD,IAAI,CAACE,IAAK,EAArE,CAAZ;AACD;;AAtBgB,C,CAyBnB;AACA;AACA;AACA;AACA;;AACA,SAASR,cAAT,CAAwBS,GAAxB,EAAyD;AACvD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMb,EAAE,GAAG,IAAIc,SAAJ,CAAcJ,GAAd,CAAX,CADsC,CACR;;AAC9BV,IAAAA,EAAE,CAACe,MAAH,GAAY,MAAMH,OAAO,CAACZ,EAAD,CAAzB,CAFsC,CAER;;AAC/B,GAHM,CAAP;AAID","sourcesContent":["import { Post } from './types'\r\n\r\nexport class Posts {\r\n  private ws: Promise<WebSocket>\r\n  constructor() {\r\n    this.ws =  asyncWebSocket('ws://127.0.0.1:3001/posts')\r\n  }\r\n  // давай для начала добавим метод onNewPost((post: Post) => void) такой\r\n  // эта функция будет устанавливать колбек, коотоый будет вызываться при получении нового поста\r\n  // вот (post: Post) => void -- это то, каким должен быть колбек, он будет принимать 1 пост и ничего не возвращать\r\n  // мы кстати уже можем заюзать этот метод в App, го туда\r\n  // Аня? что? вот такое крч тут коллбек?это никакие правила не нарушает? ага, мы его будем вызывать\r\n  // нет, наоборот, реактивное программирование) от слова \"реакция\" на что-то (изменения/события)\r\n  //  эм что это это ты придумал? нет, \"реактивное прграммирование\" потом загуглить надо (тот же реакт поэтому так зовется)\r\n  onNewPost(callback: (post: Post) => void) {//А что тут войд значит?\r\n    // так оно же не работает\r\n    // ща напишем, но считай, что оно работает и взглянем на этот метод снаружи (из App), мб так по смыслу будет понятнее\r\n    // можно вернуться в App\r\n  }\r\n  getPosts() {\r\n    return fetch('http://127.0.0.1:3001/get_posts')\r\n  }\r\n  sendPost(post: Post) {\r\n    return fetch(`http://127.0.0.1:3001/send_post?name=${post.name}&text=${post.text}`)\r\n  }\r\n}\r\n\r\n// давай для начала объясню, что я тут написал\r\n// по сути смысл данной функции в том, чтобы создать вебсокет 1\r\n// 2 - добавить колбек, который выполнится, когда сокет откроется (будет готов)\r\n// 3 - вернуть результат в виде промиса, чтобы потом можно было дождаться готовности вебсокета\r\n// прост если не ждать, то ты видела, какая ошибка получается\r\nfunction asyncWebSocket(url: string): Promise<WebSocket> {\r\n  return new Promise((resolve, reject) => {\r\n    const ws = new WebSocket(url) // (1)\r\n    ws.onopen = () => resolve(ws) // (2 - 3)\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}