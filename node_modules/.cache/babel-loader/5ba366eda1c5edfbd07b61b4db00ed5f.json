{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\network.v1\\\\cozy-space-client\\\\src\\\\PostSendForm.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = styled.div`\n  top: 0;\n  position: sticky;\n  margin: 0 auto;\n  margin-bottom: 5%;\n  padding-top: 5%;\n  @media (max-width: 320px) {\n    padding-top: 5px;\n  }\n\n  max-width: 400px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = Form;\nconst Input = styled.input`\n  padding: 10px;\n  background-color: #746087;\n  border: 1px solid ${props => props.error ? 'red' : '#1e1d1f'};\n  border-radius: 10px;\n  outline: none;\n  font-family: 'Tourney', cursive;\n  font-weight: 800;\n`;\n_c2 = Input;\nconst Textarea = styled.textarea`\n  min-height: 100px;\n  padding: 10px;\n  border-radius: 15px;\n  outline: none;\n  border: 1px solid ${props => props.error ? 'red' : '#1e1d1f'};\n  background-color: #746087;\n  font-family: 'Tourney', cursive;\n  font-weight: 800;\n`;\n_c3 = Textarea;\nconst Button = styled.button`\n  margin-top: 7%;\n  max-width: 120px;\n  max-height: 40px;\n  outline: none;\n  border-radius: 30px;\n  background: linear-gradient(45deg, #66538f 30%, #7984e8 60%, #2d3159);\n  border: transparent;\n  color: #000;\n  font-size: 28px;\n  font-family: 'Bungee Shade', cursive;\n  font-weight: 900;\n  cursor: pointer;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition-duration: 0.5s;\n  top: 0;\n  position: relative;\n  &:hover {\n    top: 5px;\n  }\n`;\n_c4 = Button;\nconst Label = styled.label`\n  margin-top: 25px;\n  margin-bottom: 8px;\n  color: #746087;\n  font-size: 20px;\n  font-family: 'Tourney', cursive;\n`;\n_c5 = Label;\nexport function PostSendForm(props) {\n  _s();\n\n  const [name, setName] = React.useState('');\n  const [text, setText] = React.useState('');\n  const [validName, setValidName] = React.useState(true);\n  const [validText, setValidText] = React.useState(true);\n\n  const onButtonClick = () => {\n    const post = {\n      name,\n      text\n    };\n    props.onSend(post);\n    setText('');\n  };\n\n  const onKeyEnter = e => {\n    if (e.key === 'Enter') {\n      onButtonClick();\n      e.preventDefault();\n    }\n  };\n\n  const onNameBlur = () => {\n    // если не веришь, что булин\n    // можно было бы так:\n    // const isValid = !name // какой тип у isValid? ббул воть \n    // setValidName(isValid)\n    // но зачем нам лишняя переменная\n    // но я правильно написала или не? ну давай в голове прокрутим\n    // пот допустим мы убрали фокус, а name == 'Pasha'\n    // что попадет в setValidName(сюда) тру - не тру же:\n    // !'Pasha' => !(truthy) => !true => false\n    // ну я думала имя заполнено же - да, а мы ставим setValidName(false) - не логично да?\n    // не понимаю я уже сильно запауталась()\n    // а нам надо тру, значит что еще надо добавить?\n    // сука блять почему я тип не могу увидеть ((((((()))))))\n    // ну оно так тип name покажет, а не тип !name  что??\n    // или ты даже не видишь, что у name тип string был? тока стринг вижу - ну вот, оно(кто оно? вскод при помощи тайпскрипта) только это умеет показывать\n    // вот ща правильно вроде да? вроде\n    // !!'Pasha' => !!(truthy) => !!true => !false => true - поняла логику? ну примерно\n    // а если name пустая строка будет? построй такую же цепочку:\n    // !!\"\" => !!(falsy) =>  !!false => !true => false.\n    // умничка (но кстати строка с пробелом понимается js'ом как не пустая и она будет truthy, так как не нулевой длины)\n    // ща норм все\n    // го ниже так же и тестить\n    setValidName(!!name); //блин оно не булин.. булин же, ты забыла что делает ! ? помню про НЕ...Преобразовывает тип данных?\n    // в булин, если оно truthy, то будет true, если falsy то будет false\n    // пустая строка это falsy, непустая truthy - ну \n    // но при этом инвертирует да, свою функцию выполнять не перестает\n  };\n\n  const onTextBlur = () => {\n    setValidText(!!text);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      children: \"Your name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: name,\n      onChange: e => setName(e.target.value),\n      error: !validName,\n      onBlur: onNameBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      children: \"Share what`s in your mind\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n      value: text,\n      onKeyPress: onKeyEnter,\n      onChange: e => setText(e.target.value),\n      error: !validText,\n      onBlur: onTextBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onButtonClick,\n      children: \"go!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n} // по сути валидация не долго делается...хм\n// ну она ща не по лная как бы, только визуально\n// мы пока не запретили отправлять пустое, все еще можно отправить\n// надо еще подумать над\n// аа я еще хотела что б текст вспомогательный писал типа введите тд - это легко сделать уже\n// по сути просто под Label добавить дивку с текстом, и отображать ее тернарником если !textValid\n// под каждой Label своя дивка (ну и верстку надо им сделать да)0)\n// блин есть хочу)00 сложно сосредоточиться\n// а есть шо? покушай, я подожду, хорошо кушай киса :33\n// вроде оки\n// ты туть?\n// мама как раз пришла))) лол\n// так быстро7 ага норм)\n// пол часа дают им - как в пиле ахаххахахаах рассказывает шо купила\n// подождем)\n// там кстати ща можно упростить, как я изначально тебе говорил\n// где onTextBlur и onNameBlur напомни\n// если ты нарисуешь в уме или на бумаге схему когда setValidName true а когда false и как оно зависит от !name\n// то ты поймешь, что setValidName(тут должно быть что?) я думаю если шо\n// я просто не могу сосредоточиться, перечитываю текст по 20 раз( хз че так) и в итоге это просто текст в голове, без представлений\n// наверное поэтому мне сложно читать без видео и схем\n// и if else можно убрать (и тернарник тож не нужен)\n// боже блять ножка от ноута потекла пошла руки помыть\n// эм, куда потекла?? клей течет? пластик? клей вытекает но он стал черного цввета\n// жесть, оно так греется сильно значит(())\n// если имя не ввели, то срабатывается сет валид нейм ( а шо оно делает? красным ток подсвечивает и все?)\n// не ты мб не понял вопрос. что делает сет валид нейм? обновляет переменную validName  и перерисовывает саму компоненту заново\n// делает переменную validName = true или false (а красным подсвечивает уже Input через пропс error)\n// могу пример\n// ну вот схема) тут на этой схеме тебе нужно обратить внимание на то, что в ветке тру и сетвалид делается тру, и наоборот\n// а значит\n//      | !name | это значене равно логически тому, что должно быть внутри setValidName(тут)\n//          |\n// true --------- false\n// |                |\n// |                |_setValidName(false)\n// |\n// setValidName(true)\n//я всё равно не понимаю про сет валид нейм((((((((((((((((((((((\n// конкретные её действия. без абстракций\n// это часть хука useState, и вызывается она в функции\n// когда мы пишем setValidName(true допустим)\n// 1) реакт перерисовывает все DOM дерево (пропуская те, что не изменились)\n// 2) видит что стейт был измененен, рисует PostSendForm c vaidName = true\n// 3) так как это функция то весь код, который идет ниже тоже выполнится, дойдет до return (\n// <Form>\n// <Label>Your name</Label>... и тд\n// 4) все, компонент нарисован с новым стейтом\n// что именно? попробуй переформулировать вопрос\n// так а вч ем был вопрос твой?\n// вопрос был в том, как убрать if else и оставить один вызов setValidЧто-то в обоих onЧтотоBlur'ах\n// учитывая то, что !name - boolean тип, а setValidЧтоТо(принимает boolean тож)\n// нужно как-то объединить сет валид нейм и текст?\n// нет, они отдельно же останутся\n\n_s(PostSendForm, \"WGqimULkfuqWnlbu2xcRN3LrG7E=\");\n\n_c6 = PostSendForm;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Form\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Textarea\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"Label\");\n$RefreshReg$(_c6, \"PostSendForm\");","map":{"version":3,"sources":["D:/programming/network.v1/cozy-space-client/src/PostSendForm.tsx"],"names":["React","styled","Form","div","Input","input","props","error","Textarea","textarea","Button","button","Label","label","PostSendForm","name","setName","useState","text","setText","validName","setValidName","validText","setValidText","onButtonClick","post","onSend","onKeyEnter","e","key","preventDefault","onNameBlur","onTextBlur","target","value"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Post } from './types'\r\n\r\nconst Form = styled.div`\r\n  top: 0;\r\n  position: sticky;\r\n  margin: 0 auto;\r\n  margin-bottom: 5%;\r\n  padding-top: 5%;\r\n  @media (max-width: 320px) {\r\n    padding-top: 5px;\r\n  }\r\n\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\ninterface ValidProps {\r\n  error: boolean;\r\n}\r\n\r\nconst Input = styled.input<ValidProps>`\r\n  padding: 10px;\r\n  background-color: #746087;\r\n  border: 1px solid ${props => props.error ? 'red' : '#1e1d1f'};\r\n  border-radius: 10px;\r\n  outline: none;\r\n  font-family: 'Tourney', cursive;\r\n  font-weight: 800;\r\n`\r\n\r\nconst Textarea = styled.textarea<ValidProps>`\r\n  min-height: 100px;\r\n  padding: 10px;\r\n  border-radius: 15px;\r\n  outline: none;\r\n  border: 1px solid ${props => props.error ? 'red' : '#1e1d1f'};\r\n  background-color: #746087;\r\n  font-family: 'Tourney', cursive;\r\n  font-weight: 800;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-top: 7%;\r\n  max-width: 120px;\r\n  max-height: 40px;\r\n  outline: none;\r\n  border-radius: 30px;\r\n  background: linear-gradient(45deg, #66538f 30%, #7984e8 60%, #2d3159);\r\n  border: transparent;\r\n  color: #000;\r\n  font-size: 28px;\r\n  font-family: 'Bungee Shade', cursive;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition-duration: 0.5s;\r\n  top: 0;\r\n  position: relative;\r\n  &:hover {\r\n    top: 5px;\r\n  }\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin-top: 25px;\r\n  margin-bottom: 8px;\r\n  color: #746087;\r\n  font-size: 20px;\r\n  font-family: 'Tourney', cursive;\r\n`\r\n\r\ninterface Props {\r\n  onSend: (post: Post) => void\r\n}\r\n\r\nexport function PostSendForm(props: Props) {\r\n  const [name, setName] = React.useState('')\r\n  const [text, setText] = React.useState('')\r\n\r\n  const [validName, setValidName] = React.useState(true)\r\n  const [validText, setValidText] = React.useState(true)\r\n\r\n  const onButtonClick = () => {\r\n    const post: Post = {\r\n      name,\r\n      text,\r\n    }\r\n\r\n    props.onSend(post)\r\n    setText('')\r\n  }\r\n\r\n  const onKeyEnter = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      onButtonClick()\r\n      e.preventDefault()\r\n    }\r\n  }\r\n  \r\n  const onNameBlur = () => { \r\n    // если не веришь, что булин\r\n    // можно было бы так:\r\n    // const isValid = !name // какой тип у isValid? ббул воть \r\n    // setValidName(isValid)\r\n    // но зачем нам лишняя переменная\r\n    // но я правильно написала или не? ну давай в голове прокрутим\r\n    // пот допустим мы убрали фокус, а name == 'Pasha'\r\n    // что попадет в setValidName(сюда) тру - не тру же:\r\n    // !'Pasha' => !(truthy) => !true => false\r\n    \r\n    // ну я думала имя заполнено же - да, а мы ставим setValidName(false) - не логично да?\r\n    // не понимаю я уже сильно запауталась()\r\n    // а нам надо тру, значит что еще надо добавить?\r\n    // сука блять почему я тип не могу увидеть ((((((()))))))\r\n    // ну оно так тип name покажет, а не тип !name  что??\r\n    // или ты даже не видишь, что у name тип string был? тока стринг вижу - ну вот, оно(кто оно? вскод при помощи тайпскрипта) только это умеет показывать\r\n    // вот ща правильно вроде да? вроде\r\n\r\n    // !!'Pasha' => !!(truthy) => !!true => !false => true - поняла логику? ну примерно\r\n    // а если name пустая строка будет? построй такую же цепочку:\r\n    // !!\"\" => !!(falsy) =>  !!false => !true => false.\r\n    // умничка (но кстати строка с пробелом понимается js'ом как не пустая и она будет truthy, так как не нулевой длины)\r\n    // ща норм все\r\n    // го ниже так же и тестить\r\n     setValidName(!!name) //блин оно не булин.. булин же, ты забыла что делает ! ? помню про НЕ...Преобразовывает тип данных?\r\n    // в булин, если оно truthy, то будет true, если falsy то будет false\r\n    // пустая строка это falsy, непустая truthy - ну \r\n    // но при этом инвертирует да, свою функцию выполнять не перестает\r\n  }\r\n\r\n  const onTextBlur = () => {\r\n    setValidText(!!text)\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <Label>Your name</Label>\r\n      <Input\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)} \r\n        error={!validName} \r\n        onBlur={onNameBlur}\r\n      />\r\n      <Label>Share what`s in your mind</Label>\r\n      <Textarea\r\n        value={text}\r\n        onKeyPress={onKeyEnter}\r\n        onChange={(e) => setText(e.target.value)} \r\n        error={!validText}\r\n        onBlur={onTextBlur}\r\n      />\r\n      <Button onClick={onButtonClick}>go!</Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\n// по сути валидация не долго делается...хм\r\n\r\n// ну она ща не по лная как бы, только визуально\r\n// мы пока не запретили отправлять пустое, все еще можно отправить\r\n\r\n// надо еще подумать над\r\n// аа я еще хотела что б текст вспомогательный писал типа введите тд - это легко сделать уже\r\n// по сути просто под Label добавить дивку с текстом, и отображать ее тернарником если !textValid\r\n// под каждой Label своя дивка (ну и верстку надо им сделать да)0)\r\n\r\n// блин есть хочу)00 сложно сосредоточиться\r\n// а есть шо? покушай, я подожду, хорошо кушай киса :33\r\n// вроде оки\r\n// ты туть?\r\n// мама как раз пришла))) лол\r\n// так быстро7 ага норм)\r\n// пол часа дают им - как в пиле ахаххахахаах рассказывает шо купила\r\n// подождем)\r\n\r\n// там кстати ща можно упростить, как я изначально тебе говорил\r\n// где onTextBlur и onNameBlur напомни\r\n// если ты нарисуешь в уме или на бумаге схему когда setValidName true а когда false и как оно зависит от !name\r\n// то ты поймешь, что setValidName(тут должно быть что?) я думаю если шо\r\n// я просто не могу сосредоточиться, перечитываю текст по 20 раз( хз че так) и в итоге это просто текст в голове, без представлений\r\n// наверное поэтому мне сложно читать без видео и схем\r\n// и if else можно убрать (и тернарник тож не нужен)\r\n// боже блять ножка от ноута потекла пошла руки помыть\r\n// эм, куда потекла?? клей течет? пластик? клей вытекает но он стал черного цввета\r\n// жесть, оно так греется сильно значит(())\r\n// если имя не ввели, то срабатывается сет валид нейм ( а шо оно делает? красным ток подсвечивает и все?)\r\n// не ты мб не понял вопрос. что делает сет валид нейм? обновляет переменную validName  и перерисовывает саму компоненту заново\r\n// делает переменную validName = true или false (а красным подсвечивает уже Input через пропс error)\r\n// могу пример\r\n// ну вот схема) тут на этой схеме тебе нужно обратить внимание на то, что в ветке тру и сетвалид делается тру, и наоборот\r\n// а значит\r\n//      | !name | это значене равно логически тому, что должно быть внутри setValidName(тут)\r\n//          |\r\n// true --------- false\r\n// |                |\r\n// |                |_setValidName(false)\r\n// |\r\n// setValidName(true)\r\n\r\n\r\n\r\n\r\n//я всё равно не понимаю про сет валид нейм((((((((((((((((((((((\r\n// конкретные её действия. без абстракций\r\n// это часть хука useState, и вызывается она в функции\r\n// когда мы пишем setValidName(true допустим)\r\n// 1) реакт перерисовывает все DOM дерево (пропуская те, что не изменились)\r\n// 2) видит что стейт был измененен, рисует PostSendForm c vaidName = true\r\n// 3) так как это функция то весь код, который идет ниже тоже выполнится, дойдет до return (\r\n    // <Form>\r\n    // <Label>Your name</Label>... и тд\r\n// 4) все, компонент нарисован с новым стейтом\r\n\r\n// что именно? попробуй переформулировать вопрос\r\n// так а вч ем был вопрос твой?\r\n// вопрос был в том, как убрать if else и оставить один вызов setValidЧто-то в обоих onЧтотоBlur'ах\r\n// учитывая то, что !name - boolean тип, а setValidЧтоТо(принимает boolean тож)\r\n// нужно как-то объединить сет валид нейм и текст?\r\n// нет, они отдельно же останутся"]},"metadata":{},"sourceType":"module"}