{"ast":null,"code":"export class Posts {\n  constructor() {\n    this.ws = void 0;\n    this.ws = new WebSocket('ws://127.0.0.1:3001/posts');\n  } // давай для начала добавим метод onNewPost((post: Post) => void) такой\n  // эта функция будет устанавливать колбек, коотоый будет вызываться при получении нового поста\n  // вот (post: Post) => void -- это то, каким должен быть колбек, он будет принимать 1 пост и ничего не возвращать\n  // мы кстати уже можем заюзать этот метод в App, го туда\n  // Аня? что? вот такое крч тут коллбек?это никакие правила не нарушает? ага, мы его будем вызывать\n  // нет, наоборот, реактивное программирование) от слова \"реакция\" на что-то (изменения/события)\n  //  эм что это это ты придумал? нет, \"реактивное прграммирование\" потом загуглить надо (тот же реакт поэтому так зовется)\n\n\n  onNewPost(callback) {\n    this.handleNewPost = callback; // вот так ))и шо это за бред?\n    // только надо объявить handleNewPost как приватное поле, это можно чере Ctrl+точка сделать такого нет\n    // не бред, мы этот handleNewPost теперь можем вызывать - а вызовется наш колбек из App (в котором сетПостс)\n  }\n\n  getPosts() {\n    return fetch('http://127.0.0.1:3001/get_posts');\n  }\n\n  sendPost(post) {\n    return fetch(`http://127.0.0.1:3001/send_post?name=${post.name}&text=${post.text}`);\n  }\n\n}","map":{"version":3,"sources":["D:/programming/network.v1/cozy-space-client/src/Data.ts"],"names":["Posts","constructor","ws","WebSocket","onNewPost","callback","handleNewPost","getPosts","fetch","sendPost","post","name","text"],"mappings":"AAEA,OAAO,MAAMA,KAAN,CAAY;AAGjBC,EAAAA,WAAW,GAAG;AAAA,SAFNC,EAEM;AACZ,SAAKA,EAAL,GAAW,IAAIC,SAAJ,CAAc,2BAAd,CAAX;AAED,GANgB,CAOjB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,SAAS,CAACC,QAAD,EAAqC;AAC5C,SAAKC,aAAL,GAAqBD,QAArB,CAD4C,CACd;AAC9B;AACA;AAGD;;AACDE,EAAAA,QAAQ,GAAG;AACT,WAAOC,KAAK,CAAC,iCAAD,CAAZ;AACD;;AACDC,EAAAA,QAAQ,CAACC,IAAD,EAAa;AACnB,WAAOF,KAAK,CAAE,wCAAuCE,IAAI,CAACC,IAAK,SAAQD,IAAI,CAACE,IAAK,EAArE,CAAZ;AACD;;AA1BgB","sourcesContent":["import { FullPost, Post } from './types'\r\n\r\nexport class Posts {\r\n  private ws: WebSocket\r\n  \r\n  constructor() {\r\n    this.ws =  new WebSocket('ws://127.0.0.1:3001/posts')\r\n\r\n  }\r\n  // давай для начала добавим метод onNewPost((post: Post) => void) такой\r\n  // эта функция будет устанавливать колбек, коотоый будет вызываться при получении нового поста\r\n  // вот (post: Post) => void -- это то, каким должен быть колбек, он будет принимать 1 пост и ничего не возвращать\r\n  // мы кстати уже можем заюзать этот метод в App, го туда\r\n  // Аня? что? вот такое крч тут коллбек?это никакие правила не нарушает? ага, мы его будем вызывать\r\n  // нет, наоборот, реактивное программирование) от слова \"реакция\" на что-то (изменения/события)\r\n  //  эм что это это ты придумал? нет, \"реактивное прграммирование\" потом загуглить надо (тот же реакт поэтому так зовется)\r\n  onNewPost(callback: (post: FullPost) => void) {\r\n    this.handleNewPost = callback // вот так ))и шо это за бред?\r\n    // только надо объявить handleNewPost как приватное поле, это можно чере Ctrl+точка сделать такого нет\r\n    // не бред, мы этот handleNewPost теперь можем вызывать - а вызовется наш колбек из App (в котором сетПостс)\r\n    \r\n    \r\n  }\r\n  getPosts() {\r\n    return fetch('http://127.0.0.1:3001/get_posts')\r\n  }\r\n  sendPost(post: Post) {\r\n    return fetch(`http://127.0.0.1:3001/send_post?name=${post.name}&text=${post.text}`)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}