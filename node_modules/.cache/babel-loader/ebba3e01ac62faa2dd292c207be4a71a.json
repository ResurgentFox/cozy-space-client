{"ast":null,"code":"var _jsxFileName = \"D:\\\\programming\\\\network.v1\\\\cozy-space-client\\\\src\\\\PostSendForm.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = styled.div`\n  top: 0;\n  position: sticky;\n  margin: 0 auto;\n  margin-bottom: 5%;\n  padding-top: 5%;\n  @media (max-width: 320px) {\n    padding-top: 5px;\n  }\n\n  max-width: 400px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = Form;\nconst Input = styled.input`\n  padding: 10px;\n  background-color: #746087;\n  border: 1px solid #1e1d1f;\n  border-radius: 10px;\n  outline: none;\n  font-family: 'Tourney', cursive;\n  font-weight: 800;\n`;\n_c2 = Input;\nconst Textarea = styled.textarea`\n  min-height: 100px;\n  padding: 10px;\n  border-radius: 15px;\n  outline: none;\n  border: 1px solid #1e1d1f;\n  background-color: #746087;\n  font-family: 'Tourney', cursive;\n  font-weight: 800;\n`;\n_c3 = Textarea;\nconst Button = styled.button`\n  margin-top: 7%;\n  max-width: 120px;\n  max-height: 40px;\n  outline: none;\n  border-radius: 30px;\n  background: linear-gradient(45deg, #66538f 30%, #7984e8 60%, #2d3159);\n  border: transparent;\n  color: #000;\n  font-size: 28px;\n  font-family: 'Bungee Shade', cursive;\n  font-weight: 900;\n  cursor: pointer;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition-duration: 0.5s;\n  top: 0;\n  position: relative;\n  &:hover {\n    top: 5px;\n  }\n`;\n_c4 = Button;\nconst Label = styled.label`\n  margin-top: 25px;\n  margin-bottom: 8px;\n  color: #746087;\n  font-size: 20px;\n  font-family: 'Tourney', cursive;\n`;\n_c5 = Label;\n\nfunction validation() {\n  if (valid) {// АААА ПААШАААААА ПАМАГИ(99) я туть ^^\n    // 3 момента:\n    // 1) синтаксис хука useState такой: \n    // const [штука, setШтука] = React.useState(дефолтное значене штуки)\n    // дефолнтное значение, тут будет true ли false, ну наверное true, потому что будем считать шо по дефолту все ок введено\n    // 2) у хуков есть правила использования, тут на это ругается eslint\n    // хуки можно юзать только внутри функциональных React-компонент\n    // хуки нельзя использовать внутри циклов, if'ов и вообще простых функциях (кроме кастомных хуков)\n    // поэтому предлагаю перенести 80 строку на 99-ю \n    // условия где писать можно - проверку что text и name не пустые? ага в обработчике нажатия кнопки лучше, как я там написал\n    // в onButtonClick, можно даже в одну строчку это сделать в setValid(тут условия) а щас минутку\n    // 3) чет забыл что хотел)0) а, ну эту функцию можно удалить\n  } else {}\n}\n\nexport function PostSendForm(props) {\n  _s();\n\n  const [name, setName] = React.useState('');\n  const [text, setText] = React.useState('');\n  const [valid, setValid] = React.useState(true);\n\n  const onButtonClick = () => {\n    const post = {\n      name,\n      text\n    };\n    props.onSend(post);\n    setText('');\n  };\n\n  const onKeyEnter = e => {\n    if (e.key === 'Enter') {\n      onButtonClick();\n      e.preventDefault();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Label, {\n      children: \"Your name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Label, {\n      children: \"Share what`s in your mind\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n      value: text,\n      onKeyPress: onKeyEnter,\n      onChange: e => setText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onButtonClick,\n      children: \"go!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n} // ты туть?\n// да я думаю\n// ну вообще у меня в голове общий план такой:\n// 1) в PostSendForm нужно добавить переменную (состояние) через useState, назовем ее valid (правильность, валидность)\n// 2) в зависимости от того, valid == true или false,\n//  в компонентах Input и Textarea будем рисовать border красным или как сейчас #1e1d1f (стоит просто не отдельным)\n// 3) при нажатии на кнопку (в onButtonClick) надо проверять name и text что они не '' и если пустые, то делать valid = false, через хук (setValid например будет зваться)\n\n_s(PostSendForm, \"oynxp0VzCZbUMj98fMFdHE25LZw=\");\n\n_c6 = PostSendForm;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Form\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Textarea\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"Label\");\n$RefreshReg$(_c6, \"PostSendForm\");","map":{"version":3,"sources":["D:/programming/network.v1/cozy-space-client/src/PostSendForm.tsx"],"names":["React","styled","Form","div","Input","input","Textarea","textarea","Button","button","Label","label","validation","valid","PostSendForm","props","name","setName","useState","text","setText","setValid","onButtonClick","post","onSend","onKeyEnter","e","key","preventDefault","target","value"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAGA,MAAMC,IAAI,GAAGD,MAAM,CAACE,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;KAAMD,I;AAeN,MAAME,KAAK,GAAGH,MAAM,CAACI,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMD,K;AAUN,MAAME,QAAQ,GAAGL,MAAM,CAACM,QAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;MAAMD,Q;AAWN,MAAME,MAAM,GAAGP,MAAM,CAACQ,MAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBA;MAAMD,M;AA0BN,MAAME,KAAK,GAAGT,MAAM,CAACU,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA,CANA;MAAMD,K;;AAYN,SAASE,UAAT,GAAsB;AAEpB,MAAIC,KAAJ,EAAU,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG,GAbL,MAaW,CAEV;AACF;;AAED,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAoC;AAAA;;AACzC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,KAAK,CAACkB,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,KAAK,CAACkB,QAAN,CAAe,EAAf,CAAxB;AACA,QAAM,CAACL,KAAD,EAAQQ,QAAR,IAAoBrB,KAAK,CAACkB,QAAN,CAAe,IAAf,CAA1B;;AAIA,QAAMI,aAAa,GAAG,MAAM;AAC1B,UAAMC,IAAU,GAAG;AACjBP,MAAAA,IADiB;AAEjBG,MAAAA;AAFiB,KAAnB;AAKAJ,IAAAA,KAAK,CAACS,MAAN,CAAaD,IAAb;AACAH,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD,GARD;;AAUA,QAAMK,UAAU,GAAIC,CAAD,IAA4B;AAC7C,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBL,MAAAA,aAAa;AACbI,MAAAA,CAAC,CAACE,cAAF;AACD;AACF,GALD;;AAOA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEZ,IAAd;AAAoB,MAAA,QAAQ,EAAGU,CAAD,IAAOT,OAAO,CAACS,CAAC,CAACG,MAAF,CAASC,KAAV;AAA5C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,QAAD;AACE,MAAA,KAAK,EAAEX,IADT;AAEE,MAAA,UAAU,EAAEM,UAFd;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAON,OAAO,CAACM,CAAC,CAACG,MAAF,CAASC,KAAV;AAH1B;AAAA;AAAA;AAAA;AAAA,YAJF,eASE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAER,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;GA7CgBR,Y;;MAAAA,Y","sourcesContent":["import * as React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Post } from './types'\r\n\r\nconst Form = styled.div`\r\n  top: 0;\r\n  position: sticky;\r\n  margin: 0 auto;\r\n  margin-bottom: 5%;\r\n  padding-top: 5%;\r\n  @media (max-width: 320px) {\r\n    padding-top: 5px;\r\n  }\r\n\r\n  max-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Input = styled.input`\r\n  padding: 10px;\r\n  background-color: #746087;\r\n  border: 1px solid #1e1d1f;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  font-family: 'Tourney', cursive;\r\n  font-weight: 800;\r\n`\r\n\r\nconst Textarea = styled.textarea`\r\n  min-height: 100px;\r\n  padding: 10px;\r\n  border-radius: 15px;\r\n  outline: none;\r\n  border: 1px solid #1e1d1f;\r\n  background-color: #746087;\r\n  font-family: 'Tourney', cursive;\r\n  font-weight: 800;\r\n`\r\n\r\nconst Button = styled.button`\r\n  margin-top: 7%;\r\n  max-width: 120px;\r\n  max-height: 40px;\r\n  outline: none;\r\n  border-radius: 30px;\r\n  background: linear-gradient(45deg, #66538f 30%, #7984e8 60%, #2d3159);\r\n  border: transparent;\r\n  color: #000;\r\n  font-size: 28px;\r\n  font-family: 'Bungee Shade', cursive;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n  letter-spacing: 1px;\r\n  text-transform: uppercase;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition-duration: 0.5s;\r\n  top: 0;\r\n  position: relative;\r\n  &:hover {\r\n    top: 5px;\r\n  }\r\n`\r\n\r\nconst Label = styled.label`\r\n  margin-top: 25px;\r\n  margin-bottom: 8px;\r\n  color: #746087;\r\n  font-size: 20px;\r\n  font-family: 'Tourney', cursive;\r\n`\r\n\r\ninterface Props {\r\n  onSend: (post: Post) => void\r\n}\r\n\r\nfunction validation() {\r\n  \r\n  if (valid){\r\n    // АААА ПААШАААААА ПАМАГИ(99) я туть ^^\r\n    // 3 момента:\r\n    // 1) синтаксис хука useState такой: \r\n    // const [штука, setШтука] = React.useState(дефолтное значене штуки)\r\n    // дефолнтное значение, тут будет true ли false, ну наверное true, потому что будем считать шо по дефолту все ок введено\r\n    // 2) у хуков есть правила использования, тут на это ругается eslint\r\n    // хуки можно юзать только внутри функциональных React-компонент\r\n    // хуки нельзя использовать внутри циклов, if'ов и вообще простых функциях (кроме кастомных хуков)\r\n    // поэтому предлагаю перенести 80 строку на 99-ю \r\n    // условия где писать можно - проверку что text и name не пустые? ага в обработчике нажатия кнопки лучше, как я там написал\r\n    // в onButtonClick, можно даже в одну строчку это сделать в setValid(тут условия) а щас минутку\r\n    // 3) чет забыл что хотел)0) а, ну эту функцию можно удалить\r\n      } else {\r\n\r\n  }\r\n}\r\n\r\nexport function PostSendForm(props: Props) {\r\n  const [name, setName] = React.useState('')\r\n  const [text, setText] = React.useState('')\r\n  const [valid, setValid] = React.useState(true)\r\n\r\n  \r\n\r\n  const onButtonClick = () => {\r\n    const post: Post = {\r\n      name,\r\n      text,\r\n    }\r\n\r\n    props.onSend(post)\r\n    setText('')\r\n  }\r\n\r\n  const onKeyEnter = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      onButtonClick()\r\n      e.preventDefault()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form>\r\n      <Label>Your name</Label>\r\n      <Input value={name} onChange={(e) => setName(e.target.value)} />\r\n      <Label>Share what`s in your mind</Label>\r\n      <Textarea\r\n        value={text}\r\n        onKeyPress={onKeyEnter}\r\n        onChange={(e) => setText(e.target.value)}\r\n      />\r\n      <Button onClick={onButtonClick}>go!</Button>\r\n    </Form>\r\n  )\r\n}\r\n\r\n// ты туть?\r\n// да я думаю\r\n// ну вообще у меня в голове общий план такой:\r\n// 1) в PostSendForm нужно добавить переменную (состояние) через useState, назовем ее valid (правильность, валидность)\r\n// 2) в зависимости от того, valid == true или false,\r\n//  в компонентах Input и Textarea будем рисовать border красным или как сейчас #1e1d1f (стоит просто не отдельным)\r\n// 3) при нажатии на кнопку (в onButtonClick) надо проверять name и text что они не '' и если пустые, то делать valid = false, через хук (setValid например будет зваться)\r\n"]},"metadata":{},"sourceType":"module"}